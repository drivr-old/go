// Code generated by protoc-gen-go.
// source: spiri.proto
// DO NOT EDIT!

/*
Package spiri is a generated protocol buffer package.

It is generated from these files:
	spiri.proto

It has these top-level messages:
	ReverseGeocodeRequest
	Location
	SearchPlacesRequest
	Places
*/
package spiri

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReverseGeocodeRequest struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=Lat" json:"Lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=Lng" json:"Lng,omitempty"`
}

func (m *ReverseGeocodeRequest) Reset()                    { *m = ReverseGeocodeRequest{} }
func (m *ReverseGeocodeRequest) String() string            { return proto.CompactTextString(m) }
func (*ReverseGeocodeRequest) ProtoMessage()               {}
func (*ReverseGeocodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReverseGeocodeRequest) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *ReverseGeocodeRequest) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type Location struct {
	Lat           float64 `protobuf:"fixed64,1,opt,name=Lat" json:"Lat,omitempty"`
	Lng           float64 `protobuf:"fixed64,2,opt,name=Lng" json:"Lng,omitempty"`
	AddressString string  `protobuf:"bytes,3,opt,name=AddressString" json:"AddressString,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Location) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Location) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *Location) GetAddressString() string {
	if m != nil {
		return m.AddressString
	}
	return ""
}

type SearchPlacesRequest struct {
	Lat   float64 `protobuf:"fixed64,1,opt,name=Lat" json:"Lat,omitempty"`
	Lng   float64 `protobuf:"fixed64,2,opt,name=Lng" json:"Lng,omitempty"`
	Query string  `protobuf:"bytes,3,opt,name=Query" json:"Query,omitempty"`
}

func (m *SearchPlacesRequest) Reset()                    { *m = SearchPlacesRequest{} }
func (m *SearchPlacesRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchPlacesRequest) ProtoMessage()               {}
func (*SearchPlacesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchPlacesRequest) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *SearchPlacesRequest) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *SearchPlacesRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Places struct {
	Locations []*Location `protobuf:"bytes,1,rep,name=Locations" json:"Locations,omitempty"`
}

func (m *Places) Reset()                    { *m = Places{} }
func (m *Places) String() string            { return proto.CompactTextString(m) }
func (*Places) ProtoMessage()               {}
func (*Places) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Places) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

func init() {
	proto.RegisterType((*ReverseGeocodeRequest)(nil), "spiri.ReverseGeocodeRequest")
	proto.RegisterType((*Location)(nil), "spiri.Location")
	proto.RegisterType((*SearchPlacesRequest)(nil), "spiri.SearchPlacesRequest")
	proto.RegisterType((*Places)(nil), "spiri.Places")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Spiri service

type SpiriClient interface {
	ReverseGeocode(ctx context.Context, in *ReverseGeocodeRequest, opts ...grpc.CallOption) (*Location, error)
	SearchPlaces(ctx context.Context, in *SearchPlacesRequest, opts ...grpc.CallOption) (*Places, error)
}

type spiriClient struct {
	cc *grpc.ClientConn
}

func NewSpiriClient(cc *grpc.ClientConn) SpiriClient {
	return &spiriClient{cc}
}

func (c *spiriClient) ReverseGeocode(ctx context.Context, in *ReverseGeocodeRequest, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := grpc.Invoke(ctx, "/spiri.Spiri/ReverseGeocode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiriClient) SearchPlaces(ctx context.Context, in *SearchPlacesRequest, opts ...grpc.CallOption) (*Places, error) {
	out := new(Places)
	err := grpc.Invoke(ctx, "/spiri.Spiri/SearchPlaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Spiri service

type SpiriServer interface {
	ReverseGeocode(context.Context, *ReverseGeocodeRequest) (*Location, error)
	SearchPlaces(context.Context, *SearchPlacesRequest) (*Places, error)
}

func RegisterSpiriServer(s *grpc.Server, srv SpiriServer) {
	s.RegisterService(&_Spiri_serviceDesc, srv)
}

func _Spiri_ReverseGeocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseGeocodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiriServer).ReverseGeocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spiri.Spiri/ReverseGeocode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiriServer).ReverseGeocode(ctx, req.(*ReverseGeocodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiri_SearchPlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPlacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiriServer).SearchPlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spiri.Spiri/SearchPlaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiriServer).SearchPlaces(ctx, req.(*SearchPlacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Spiri_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spiri.Spiri",
	HandlerType: (*SpiriServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReverseGeocode",
			Handler:    _Spiri_ReverseGeocode_Handler,
		},
		{
			MethodName: "SearchPlaces",
			Handler:    _Spiri_SearchPlaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spiri.proto",
}

func init() { proto.RegisterFile("spiri.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2e, 0xc8, 0x2c,
	0xca, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xac, 0xb9, 0x44, 0x83,
	0x52, 0xcb, 0x52, 0x8b, 0x8a, 0x53, 0xdd, 0x53, 0xf3, 0x93, 0xf3, 0x53, 0x52, 0x83, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x7d, 0x12, 0x4b, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x18, 0x83, 0x40, 0x4c, 0xb0, 0x48, 0x5e, 0xba, 0x04, 0x13, 0x54, 0x24, 0x2f, 0x5d, 0x29, 0x84,
	0x8b, 0xc3, 0x27, 0x3f, 0x39, 0xb1, 0x24, 0x33, 0x3f, 0x8f, 0x18, 0xf5, 0x42, 0x2a, 0x5c, 0xbc,
	0x8e, 0x29, 0x29, 0x45, 0xa9, 0xc5, 0xc5, 0xc1, 0x25, 0x45, 0x99, 0x79, 0xe9, 0x12, 0xcc, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0xa8, 0x82, 0x4a, 0xfe, 0x5c, 0xc2, 0xc1, 0xa9, 0x89, 0x45, 0xc9, 0x19,
	0x01, 0x39, 0x89, 0xc9, 0xa9, 0xc5, 0x24, 0x38, 0x48, 0x48, 0x84, 0x8b, 0x35, 0xb0, 0x34, 0xb5,
	0xa8, 0x12, 0x6a, 0x30, 0x84, 0xa3, 0x64, 0xce, 0xc5, 0x06, 0x31, 0x4a, 0x48, 0x97, 0x8b, 0x13,
	0xe6, 0xe0, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x7e, 0x3d, 0x48, 0xa8, 0xc0, 0xc4,
	0x83, 0x10, 0x2a, 0x8c, 0xda, 0x19, 0xb9, 0x58, 0x83, 0x41, 0xb2, 0x42, 0x8e, 0x5c, 0x7c, 0xa8,
	0xc1, 0x24, 0x24, 0x03, 0xd5, 0x87, 0x35, 0xf4, 0xa4, 0xd0, 0x4d, 0x55, 0x62, 0x10, 0xb2, 0xe6,
	0xe2, 0x41, 0xf6, 0x96, 0x90, 0x14, 0x54, 0x09, 0x16, 0xbf, 0x4a, 0xf1, 0x42, 0xe5, 0x20, 0xa2,
	0x4a, 0x0c, 0x49, 0x6c, 0xe0, 0x48, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x28, 0x9e, 0xa8,
	0x13, 0xc3, 0x01, 0x00, 0x00,
}
